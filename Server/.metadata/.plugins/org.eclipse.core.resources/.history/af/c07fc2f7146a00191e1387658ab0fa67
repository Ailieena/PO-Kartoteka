import java.rmi.RemoteException;
import java.util.Random;

public class Oczko implements Game
{
	GameClientInterface[] clients = new GameClientInterface[3];
	GraczOczko[] gracze = new GraczOczko[3];
	int clientCount = 0;
	int id;
	int i = 0;
	int value = 0;
	int currentPlayer = 0;
	String gameName = "Oczko";
	TaliaOczko t = new TaliaOczko();
	
	Oczko() throws RemoteException
	{
		Random k = new Random();
		id = k.nextInt(50);
	}
	@Override
	public int getId() throws RemoteException {
		return id;
	}

	@Override
	public int getGameType() throws RemoteException {
		return 0;
	}

	@Override
	public void join(GameClientInterface client) throws RemoteException {
		
		if(clientCount >= 3)
		{
			client.notify("W pokoju jest ju¿ 3 graczy");
			return;
		}
		gracze[clientCount] = new GraczOczko(client);
		clients[clientCount] = client;
		clientCount++;
		clients[0].myTurn();
	}
	public void passTurn(GameClientInterface player) throws RemoteException
	{
		if(gameOver())
		{
			int k = whoWon();
			notifyAll(clients[k].getId() + " wygra³! " );
			return;
		}
		for(int j = currentPlayer+1; j < currentPlayer+clientCount; j++)
		{
			if(gracze[j%clientCount].isPlaying())
			{
				currentPlayer = j%clientCount;
				continue;
			}
		}
		clients[currentPlayer].myTurn();
	}
	@Override
	public void play(GameClientInterface player) throws RemoteException 
	{
		notifyAllBut(clients[currentPlayer].getId() + " dosta³ kartê " + value, clients[currentPlayer]);
		gracze[currentPlayer].addPoints(value);
		if(gracze[currentPlayer].getPoints() >= 21)
		{
			gracze[currentPlayer].setNotPlaying();
		}
		if(gameOver())
		{
			int k = whoWon();
			notifyAll(clients[k].getId() + " wygra³! " );
			return;
		}
		for(int j = currentPlayer+1; j < currentPlayer+clientCount; j++)
		{
			if(gracze[j%clientCount].isPlaying())
			{
				currentPlayer = j%clientCount;
				continue;
			}
		}
		clients[currentPlayer].myTurn();
	}
	public void notifyAll(String s) throws RemoteException
	{
		for(int i = 0; i < clientCount; i++)
		{
			clients[i].notify(s);
		}
	}
	public void notifyAllBut(String s, String id) throws RemoteException
	{
		//System.out.println("No notify to " + id);
		for(int i = 0; i < clientCount; i++)
		{
			//System.out.println("notify do " + clients[i].getId());
			if(!clients[i].getId().equals(id))
				clients[i].notify(s);
		}
	}
	@Override
	public int getCard(GameClientInterface player) throws RemoteException 
	{
		if(player == clients[currentPlayer])
		{
			if(i > 52)
			{
				notifyAll("Koniec talii");
				return -1;
			}
			int val = t.getCard();
			notifyAllBut(player.getId() + " dosta³ kartê " + val, player.getId());
			value = val;
			return val;
		}
		return -1;
	}
	private int whoWon()
	{
		int k = 0;
		int bestResult = 0;
		for(int j = 0; i < clientCount; j++)
		{
			if(gracze[j].getPoints() > bestResult && gracze[j].getPoints() <= 21)
			{
				k = j;
				bestResult = gracze[j].getPoints();
			}
		}
		return k;
	}
	@Override
	public boolean gameOver() throws RemoteException {
		boolean b = false;
		for(int j = 0; i < clientCount; j++)
		{
			if(gracze[j].isPlaying())
			{
				b = true;
			}
		}
		return b;
	}

	@Override
	public boolean hasMaxPlayers() throws RemoteException {
		// TODO Auto-generated method stub
		return false;
	}

}
